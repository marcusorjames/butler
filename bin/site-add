#!/bin/bash
# site add subcommand

# project_dir_exists=false
# if [ $project_dir_exists = false ]; then
#   echo "hello"
# fi
# exit

package="butler site add"

. $COMMON/fzfread.sh
. $COMMON/colours.sh
. $COMMON/statusline.sh

print_usage() {
  echo "Add a new site"
  echo " " echo "SYNOPSIS:"
  echo " "
  echo "$package NAME [OPTION]"
  echo " "
  echo "  -h, --help          print this help"
  echo "  -c, --context       project context e.g. personal"
  echo "  -n, --name          name of the project (defaults to the repository name)"
  echo "  -t, --template      site template such as 'wordpress'"
  echo "  -r, --repository    git repository"
}

check_template_exists() {
  [ ! -d $1 ] && echo -e "${CError}Error: Template does not exist" \
    && echo " " \
    && echo -e "${CWarn}Available templates are $(ls -m $DIR/../templates/)" \
    && exit 1
}

check_dir() {
  [ -d $1 ] && echo -e "${CError}Error: $2 already exists" && exit 1
}

main() {

  dry_run=false
  help=false
  name=''
  context=''
  repository=''
  template=''
  verbose=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --dry-run ) dry_run=true; shift ;;
      -h | --help )    help=true; shift ;;
      -c | --context ) context="$2"; shift 2;;
      -n | --name )    name="$2"; shift 2 ;;
      -r | --repository ) repository="$2"; shift 2 ;;
      -t | --template ) template="$2"; shift 2 ;;
      -v | --verbose ) verbose=true; shift ;;
      -- ) shift; break ;;
      * ) break ;;
    esac
  done

  $help && print_usage && exit 1

  template_root="$DIR/../templates"

  [ -z $template ] && fzf_read $template_root "Specify a template: " template
  [ -z $template ] && template="NULL" # Because the root dir is a directory

  template_dir="$template_root/$template"

  check_template_exists $template_dir

  [ -z $name ] && read -p "Specify a name: " name
  site_dir="$SITES_DIR/$name"
  check_dir $site_dir "Site"

  [ -z $repository ] && read -p "Specify a repository: " repository
  # TODO: check if valid repository

  $REQUIRED_CONTEXT && [ -z $context ] && read -p "Specify a context: " context

  [[ ! "$context" =~ ^[[:alpha:]]*$ ]] && echo -e "${CError}Context must be alphabetic" && exit 1

  project_dir=$PROJECTS_DIR
  [ ! -z $context ] && project_dir="$project_dir/$context"
  project_dir="$project_dir/$name"

  # Check if we already have a project dir and if we do prompt to contine
  project_dir_exists=false
  [ -d "$project_dir" ] && project_dir_exists=true
  if $project_dir_exists; then
    if [ -d "$project_dir/.git" ]; then
      existing_repo_url=$(git -C $project_dir config --get remote.origin.url)
      read -p "$(echo -e "Project dir" \
        "$Green$project_dir$Color_Off already exists with the following git" \
        "repository $Green$existing_repo_url$Color_Off continue? [Yn] ")" \
        -n 1 -r && echo
      else
        read -p "$(echo -e "Project dir $Green$project_dir$Color_Off already" \
          "exists continue? [Yn] ")" -n 1 -r && echo
    fi
    [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
  fi

  statusLine "Creating Site directory" "done"
  cp -r $template_dir "$site_dir/"
  if [ $project_dir_exists = false ]; then
    statusLine "Creating Project directory" "done"
    mkdir -p $project_dir
    [ -n $repository ] && git clone $repository $project_dir
  else
    statusLine "Creating Project directory" "skipped"
    statusLine "Cloning into $project_dir" "skipped"
  fi

  statusLine "Linking Project to Site" "done"

  ln -s $project_dir "$site_dir/app"

}

main "$@"

# TODOS:
# - Chown $USER:www-data
# - Add a default template
# - Add template replacing
# - Add ability to add things to the docker compose file e.g. mysql etc
